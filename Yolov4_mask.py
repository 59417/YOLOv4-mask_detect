# -*- coding: utf-8 -*-
"""EXE1014_YOLOv4_sun31.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LQm-qWR0mHWfiYCJCWLVt0M5uQem2DcR

# 使用 YOLOv4 訓練偵測口罩模型

 -- 2021/10/14 陳奕晴 --

# 1. 調用 GPU 算力
執行階段 > 變更執行階段類型 > 硬體加速器: GPU
"""

! nvidia-smi

"""# 2. 複製 darknet


*   Darknet深度學習框架: 由Joseph Redmon提出的一個用C和CUDA編寫的開源神經網絡框架 > 安裝快, 易安裝, 支持CPU和GPU計算

    - https://github.com/pjreddie/darknet
    - https://github.com/AlexeyAB/darknet.git


*   YOLO算法: YOLO(You Only Look Once)是Joseph Redmon針對Darknet框架提出的核心目標檢測算法

"""

#! git clone https://github.com/pjreddie/darknet.git 作者無維護已停更
! git clone https://github.com/AlexeyAB/darknet.git

! cd darknet; head Makefile  
# 切換到 /darknet 目錄並查看 Makefile 
# 透過 Makefile 檔案編譯檔案編譯 YOLO 的系統

"""# 3. 修改 Makefile



*   default: 0 > YOLO無法調用GPU, CUDNN, OPENCV=1


    - GPU=0
    - CUDNN=0
    - CUDNN_HALF=0
    - OPENCV=0

*   edit: 0 改為 1


    - GPU=1
    - CUDNN=1
    - CUDNN_HALF=1
    - OPENCV=1

"""

!sed -i "s/GPU=0/GPU=1/g" darknet/Makefile
!sed -i "s/CUDNN=0/CUDNN=1/g" darknet/Makefile
!sed -i "s/CUDNN_HALF=0/CUDNN_HALF=1/g" darknet/Makefile
!sed -i "s/OPENCV=0/OPENCV=1/g" darknet/Makefile

! head darknet/Makefile

"""# 4. 編譯 YOLO"""

! cd darknet; make

"""# 5. 圖片辨識"""

! cd darknet; ./darknet

# yolov4.weights
! gdown https://drive.google.com/uc?id=1cewMfusmPjYWbrnuJRuKhPMwRe_b9PaT

# 查看 /data 裡的照片
from PIL import Image
Image.open('darknet/data/dog.jpg')

# yolov4 預測
! cd darknet; ./darknet detect /content/darknet/cfg/yolov4.cfg /content/yolov4.weights /content/darknet/data/giraffe.jpg
from PIL import Image
Image.open('darknet/predictions.jpg')

"""# 6. 檢視訓練資料集

From 大數軟體有限公司
http://user93454.psee.io/TKXWV
"""

from google.colab import drive
drive.mount("/content/drive/")

# 複製 medical-masks-dataset.zip
! cp "/content/drive/My Drive/1014-Yolo偵測口罩/medical-masks-dataset.zip" /content/

# 解壓縮解壓縮 (過程存入.log)
! unzip /content/medical-masks-dataset.zip > data_unzip.log

# 檢視照片 (0602623232127-web-tete.jpg)
from PIL import Image
img = Image.open('/content/medical-masks-dataset/images/0602623232127-web-tete.jpg')
img

# 檢視照片註記檔.xml (描述資料的傳輸、結構和儲存內容)
! cat /content/medical-masks-dataset/labels/0602623232127-web-tete.xml

"""### *#註記檔 .xml 說明*

1. 人臉辨識位置
    
    <bndbox>
        <xmin>654</xmin>
	<ymin>275</ymin>
        <xmax>910</xmax>
	<ymax>517</ymax>

2. 圖片寬高、色彩

    <size>
	<width>1140</width>
	<height>855</height>
	<depth>3</depth>

3. 標籤註記
 - good: 有戴好口罩
 - none: 有口罩但沒戴好
 - bad: 沒有戴口罩

    <object>
	<name>good</name>

# 7. 產生YOLO格式註記檔
YOLO格式: 定義照片中的座標
- x, y 代表該bndBox的中心座標與圖片寬高的比值，是bndBox歸一化後的中心座標
- w, h代表該bndBox的寬高與輸入圖像寬高的比值，是bndBox歸一化後的寬高座標

      x = (xmin + xmax) / 2 * (1 / image_w)
      y = (ymin + ymax) / 2 * (1 / image_h)
      w = (xmax - xmin) / image_w
      h = (ymax - ymin) / image_h
"""

# 創建 /yolo 放置每張照片原檔與參數檔
! rm -rf /content/yolo
! mkdir /content/yolo

from bs4 import BeautifulSoup
import os
import shutil

status_dic = {'good': 2, 'bad': 1, 'none': 0}  # 對應類別 0,1,2
def getYoloFormat(filename,label_path, img_path, yolo_path, newname):
    with open(label_path+ filename, 'r') as f:
        soup = BeautifulSoup(f.read(), 'xml')
        imgname = soup.select_one('filename').text
        image_w = int(soup.select_one('width').text)
        image_h = int(soup.select_one('height').text)
        ary = []
        for obj in soup.select('object'):
            xmin = int(obj.select_one('xmin').text)
            xmax = int(obj.select_one('xmax').text)
            ymin = int(obj.select_one('ymin').text)
            ymax = int(obj.select_one('ymax').text)
            objclass = status_dic.get(obj.select_one('name').text)

            x = (xmin + (xmax-xmin)/2) * 1.0 / image_w
            y = (ymin + (ymax-ymin)/2) * 1.0 / image_h
            w = (xmax-xmin) * 1.0 / image_w
            h = (ymax-ymin) * 1.0 / image_h
            ary.append(' '.join([str(objclass), str(x),str(y),str(w),str(h)]))
            # YOLO格式需5參數: 物件類別, x, y, w, h
        if os.path.exists(img_path + imgname):
            shutil.copyfile(img_path + imgname, yolo_path + newname + '.jpg')
            with open(yolo_path + newname + '.txt', 'w') as f:
                f.write('\n'.join(ary))

import os
labelpath = '/content/medical-masks-dataset/labels/'
imgpath   = '/content/medical-masks-dataset/images/'
yolopath  = '/content/yolo/'
ary = []
for idx, f in enumerate(os.listdir(labelpath)):
    try:
        getYoloFormat(f, labelpath,imgpath, yolopath, str(idx))
    except Exception as e:
        print(e)

# 統計當前目錄下檔案的數量
! cd /content/yolo; ls -l|grep "^-"| wc -l

# 查看 /yolo 前10筆檔案
! cd /content/yolo; ls | head -n 10

! cat /content/yolo/0.txt

from PIL import Image
Image.open('/content/yolo/0.jpg')

"""# 8. 準備訓練與測試資料集"""

# 建立放置參數檔的資料夾
! rm -rf /content/cfg_mask
! mkdir /content/cfg_mask

# 找出前80%資料序號
import os
datasets = ['/content/yolo/'+ f for f in os.listdir('/content/yolo/') if not f.endswith('.txt')]
len(datasets) * 0.8

# 前80%資料寫進train.txt
with open('/content/cfg_mask/train.txt', 'w') as f:
    f.write('\n'.join(datasets[0:540]))

# 後20%資料寫進test.txt
with open('/content/cfg_mask/test.txt', 'w') as f:
    f.write('\n'.join(datasets[540:]))

# 複製參數檔案 (以文字編輯器建立)
! cp "/content/drive/My Drive/1014-Yolo偵測口罩/obj.data" cfg_mask/
! cp "/content/drive/My Drive/1014-Yolo偵測口罩/obj.names" cfg_mask/

# 修改權重備份輸出至雲端
! sed '4a backup = /content/drive/MyDrive/1014-Yolo偵測口罩/trained_weights/' /content/cfg_mask/obj.data  > /content/cfg_mask/obj2.data
! sed -i 6d /content/cfg_mask/obj2.data

! cat /content/cfg_mask/obj2.data

! head /content/cfg_mask/obj.names

"""# 9. 修改參數設定檔 

"""

#/content/darknet/cfg/yolov4.cfg
! cp /content/darknet/cfg/yolov4.cfg /content/cfg_mask/mask.cfg

"""修改 .cfg:
YOLOV4 偵測的濾鏡(filter) 大小為 (C+5)*B


- B 是每個 Feature Map 可以偵測的Bounding Box 數量
- 5 是 Bounding Box 的x,y,w,h 以及 Confidence
- C 是類別數量
    
    
    classes = 3
    filters = (classes + 5) * 3  #24
    
"""

# Commented out IPython magic to ensure Python compatibility.
# %%html
# <img src='https://miro.medium.com/max/1200/0*3A8U0Hm5IKmRa6hu.png' width="500px" />

! grep -n "subdivisions=" /content/cfg_mask/mask.cfg

! grep -n -B 7 "classes" /content/cfg_mask/mask.cfg

! sed -n -e 3p -e 961p -e 968p -e 1049p -e 1056p -e 1137p  -e 1144p /content/cfg_mask/mask.cfg

# 修改參數
! sed -i '3s/8/64/' /content/cfg_mask/mask.cfg
! sed -i '961s/255/24/' /content/cfg_mask/mask.cfg
! sed -i '968s/80/3/' /content/cfg_mask/mask.cfg
! sed -i '1049s/255/24/' /content/cfg_mask/mask.cfg
! sed -i '1056s/80/3/' /content/cfg_mask/mask.cfg
! sed -i '1137s/255/24/' /content/cfg_mask/mask.cfg
! sed -i '1144s/80/3/' /content/cfg_mask/mask.cfg

# Double Check
! sed -n -e 3p -e 961p -e 968p -e 1049p -e 1056p -e 1137p  -e 1144p /content/cfg_mask/mask.cfg

"""#10. 訓練模型

#### *#初次訓練*
"""

# 在雲端建立放置權重檔資料夾
! mkdir /content/drive/MyDrive/1014-Yolo偵測口罩/trained_weights

# 下載預訓練權重 https://drive.google.com/open?id=1JKF-bdIklxOOVy-2Cr5qdvjgGpmGfcbp
# 查詢版本對應權重 https://github.com/AlexeyAB/darknet#how-to-train-to-detect-your-custom-objects
! cp "/content/drive/My Drive/1014-Yolo偵測口罩/yolov4.conv.137" /content/cfg_mask/

# 訓練模型 darknet detector train
! darknet/darknet detector train /content/cfg_mask/obj2.data /content/cfg_mask/mask.cfg /content/cfg_mask/yolov4.conv.137 -dont_show

"""#### *#二次訓練*"""

# 使用已訓練權重檔訓練
# 將副檔名改為 .backup 以繼續訓練
# last: mask700.weights
! cp "/content/drive/MyDrive/1014-Yolo偵測口罩/trained_weights/mask_last.weights" /content/cfg_mask/mask700.backup
! darknet/darknet detector train /content/cfg_mask/obj2.data /content/cfg_mask/mask.cfg /content/cfg_mask/mask700.backup -dont_show

"""# 11. 測試模型

"""

! cp "/content/drive/My Drive/1014-Yolo偵測口罩/mask700.weights" /content/

"""### a. 用測試集測試"""

! cd darknet; ./darknet detector test /content/cfg_mask/obj2.data  /content/cfg_mask/mask.cfg /content/mask700.weights /content/yolo/680.jpg

from PIL import Image
Image.open('yolo/680.jpg')

# 開啟模型預測結果圖片
from PIL import Image
Image.open('/content/darknet/predictions.jpg')

"""### b. 用新照片測試"""

! cp "/content/drive/My Drive/1014-Yolo偵測口罩/test.JPG" /content/test.jpg

from PIL import Image
Image.open('/content/test.jpg')

! cd darknet; ./darknet detector test /content/cfg_mask/obj2.data  /content/cfg_mask/mask.cfg /content/mask700.weights /content/test.jpg

from PIL import Image
Image.open('/content/darknet/predictions.jpg')

"""# # reference:
 - https://www.youtube.com/watch?v=vGhIhitQHBE&ab_channel=%E5%A4%A7%E6%95%B8%E8%BB%9F%E9%AB%94%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8
 - https://www.youtube.com/watch?v=C0Otd6_jGmE&ab_channel=%E5%A4%A7%E6%95%B8%E8%BB%9F%E9%AB%94%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8
 - https://medium.com/ching-i/yolo-c49f70241aa7
"""
